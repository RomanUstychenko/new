{"version":3,"file":"static/js/214.8db33a40.chunk.js","mappings":"4JAEO,MAAMA,EAAmBC,GAAyCA,EAAMC,QAAQC,YAEvFC,QAAQC,IAAI,kBAAmBL,GAExB,MAAMM,EAAmBL,GAAyCA,EAAMC,QAAQK,Q,sBCHhF,MAAMC,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,IAAkB;;EAGvCC,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,IAAgB;;eCH1C,MAAMC,EAAkBA,KAKvBC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eCNAC,EAA8BA,KAKnCC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACRD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,iBACRD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,cACRD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,mBACHD,EAAAA,EAAAA,KAACD,EAAK,OCDAK,EAAoDC,EAAAA,GAC7CC,EAAyBA,KAElC,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAwB,MAEtDC,EAAeN,EAAiBlB,GAMtC,OACIc,EAAAA,EAAAA,KAAA,MAAAC,SACMS,EAAaC,KAAIvB,IACrBe,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EAEAE,EAAAA,EAAAA,MAAA,QAAMS,QAASA,KAAMC,OATAC,EASkB1B,EAAQ0B,QAPjDN,GAAcO,GAAmBA,IAAmBD,EAAK,KAAOA,IAFzCA,KAS8B,EAAAb,SAAA,CAClDM,IAAenB,EAAQ0B,IAAKd,EAAAA,EAAAA,KAACH,EAAU,KAAMG,EAAAA,EAAAA,KAACN,EAAW,KACvDM,EAAAA,EAAAA,KAAA,KAAAC,SAAIb,EAAQ4B,OAAS,OACvBT,IAAenB,EAAQ0B,KAAMd,EAAAA,EAAAA,KAACE,EAAiB,MALvCd,EAAQ0B,OAQd,EC9BAG,EAAetB,EAAAA,GAAOuB,GAAG;;;;ECShCd,EAAoDC,EAAAA,GA6DxD,EA5DyBc,KAErB,MAAMC,GAAWC,EAAAA,EAAAA,MAGT5B,EAAUW,EAAiBZ,IAC1BwB,EAAMM,IAAWb,EAAAA,EAAAA,UAAS,IAyBrC,OACEN,EAAAA,EAAAA,MAAA,QAAAF,SAAA,EACAD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,eACVE,EAAAA,EAAAA,MAACc,EAAY,CAAAhB,SAAA,EACbE,EAAAA,EAAAA,MAAA,QAAMoB,SApBsBC,IACpBA,EAAEC,iBAGGT,GAMLI,GAASM,EAAAA,EAAAA,GAAe,CAAEV,UAG1BM,EAAQ,KARNK,MAAM,4BAQG,EAOU1B,SAAA,EACrBE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACED,EAAAA,EAAAA,KAAA,SAAO4B,QAAQ,OAAM3B,SAAC,mBACtBD,EAAAA,EAAAA,KAAA,SACE6B,KAAK,OACLf,GAAG,OACHgB,MAAOd,EACPe,SAAWP,GAAMF,EAAQE,EAAEQ,OAAOF,aAItC9B,EAAAA,EAAAA,KAAA,UAAQ6B,KAAK,SAASI,SAAUxC,EAAQQ,SACrCR,EAAU,YAAc,oBAInCO,EAAAA,EAAAA,KAACM,EAAY,SAKA,C","sources":["redux/catalog/catalog-selector.ts","components/catalogs/mainCatalogs/mainCatalogs.styled.tsx","components/items/items.tsx","components/catalogs/secondaryCatalogs/secondaryCatalogs.tsx","components/catalogs/mainCatalogs/mainCatalogs.tsx","pages/main/main.styled.tsx","pages/main/main.tsx"],"sourcesContent":["import { MainCatalogState } from \"./catalog-slice\";\n\nexport const getMainCatalogs = (state: { catalog: MainCatalogState }) => state.catalog.mainCatalog;\n\nconsole.log(\"getMainCatalogs\", getMainCatalogs)\n// Селектор для отримання статусу завантаження\nexport const selectIsLoading = (state: { catalog: MainCatalogState }) => state.catalog.loading;\n\n// Селектор для отримання помилки\nexport const selectAuthError = (state: { catalog: MainCatalogState }) => state.catalog.error;","import styled from \"styled-components\";\nimport { FaRegFolderClosed, FaRegFolderOpen } from \"react-icons/fa6\";\n\nexport const CloseFolder = styled(FaRegFolderClosed)`\n    \n`\nexport const OpenFolder = styled(FaRegFolderOpen)`\n    \n`","import React from \"react\";\n\n\nexport const Items: React.FC = () => {\n\n\n    return (\n\n        <div>\nlist items\n\n        </div>\n    )\n}\n","import React from \"react\";\nimport { Items } from \"../../items/items\";\nexport const SecondaryCatalogs: React.FC = () => {\n\n\n    return (\n\n        <div>\n<button>add catalog</button>\n<button>add item</button>\n<p>List Catalogs</p>\n<Items />\n        </div>\n    )\n}\n\n","import React, { useState } from 'react';\nimport { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../../../redux/store';\n\nimport { getMainCatalogs } from '../../../redux/catalog/catalog-selector';\nimport { CloseFolder, OpenFolder } from './mainCatalogs.styled';\n\nimport { SecondaryCatalogs } from '../secondaryCatalogs/secondaryCatalogs';\n\n\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const MainCatalogs: React.FC = () => {\n\n    const [openFolder, setOpenFolder] = useState<string | null>(null);\n\n    const mainCatalogs = useTypedSelector(getMainCatalogs);\n\n    const handleFolderClick = (id: string) => {\n        // Якщо натискаємо на вже відкритий каталог, то закриваємо його\n        setOpenFolder(prevOpenFolder => (prevOpenFolder === id ? null : id));\n    };\n    return (\n        <ul>\n             {mainCatalogs.map(catalog => (\n          <li key={catalog.id}>\n            \n          <span onClick={() => handleFolderClick(catalog.id)}> \n          {openFolder === catalog.id ? <OpenFolder /> : <CloseFolder />}\n             <p>{catalog.name}</p> </span>\n          {openFolder === catalog.id && <SecondaryCatalogs/>}\n          </li>\n        ))}\n        </ul>\n    )\n}\n\n","import styled from \"styled-components\";\n\nexport const CatalogsWrap = styled.div`\n    \n    width: 400px;\n    border: 1px solid rgb(7, 94, 138);\n`","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../../redux/store';\n// import { logoutUser } from '../../redux/auth/auth-operation';\nimport { addMainCatalog } from '../../redux/catalog/catalog-operation';\nimport { selectIsLoading } from '../../redux/catalog/catalog-selector';\nimport { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { MainCatalogs } from '../../components/catalogs/mainCatalogs/mainCatalogs';\nimport { CatalogsWrap } from './main.styled';\n// Типізований хук useSelector\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n    const Main: React.FC = () => {\n\n      const dispatch = useDispatch<AppDispatch>(); // правильно типізуємо dispatch\n\n  \n        const loading = useTypedSelector(selectIsLoading);\n        const [name, setName] = useState('');\n        \n      \n      // const onLogout = () => {\n      //   dispatch(logoutUser());\n      //   localStorage.clear();\n      // };\n\n      \n      const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n    \n        // Валідація\n        if (!name) {\n          alert('Please fill in all fields');\n          return;\n        }\n    \n        // Додаємо новий каталог через dispatch\n        dispatch(addMainCatalog({ name }));\n        \n        // Очищаємо форму\n        setName('');\n      };\n    \n    return (\n      <main>\n      <h1>main page</h1>\n<CatalogsWrap>\n<form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Catalog Name:</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </div>\n        \n        <button type=\"submit\" disabled={loading}>\n          {loading ? 'Adding...' : 'Add Catalog'}\n        </button>\n      </form>\n\n<MainCatalogs />\n</CatalogsWrap>\n       \n      \n      \n      </main>\n    );\n  };\n\n  export default Main;"],"names":["getMainCatalogs","state","catalog","mainCatalog","console","log","selectIsLoading","loading","CloseFolder","styled","FaRegFolderClosed","OpenFolder","FaRegFolderOpen","Items","_jsx","children","SecondaryCatalogs","_jsxs","useTypedSelector","useSelector","MainCatalogs","openFolder","setOpenFolder","useState","mainCatalogs","map","onClick","handleFolderClick","id","prevOpenFolder","name","CatalogsWrap","div","Main","dispatch","useDispatch","setName","onSubmit","e","preventDefault","addMainCatalog","alert","htmlFor","type","value","onChange","target","disabled"],"sourceRoot":""}